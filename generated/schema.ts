// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OrderApprovedPartOne extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("exchange", Value.fromBytes(Bytes.empty()));
    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("taker", Value.fromBytes(Bytes.empty()));
    this.set("makerRelayerFee", Value.fromBigInt(BigInt.zero()));
    this.set("takerRelayerFee", Value.fromBigInt(BigInt.zero()));
    this.set("makerProtocolFee", Value.fromBigInt(BigInt.zero()));
    this.set("takerProtocolFee", Value.fromBigInt(BigInt.zero()));
    this.set("feeRecipient", Value.fromBytes(Bytes.empty()));
    this.set("target", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderApprovedPartOne entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderApprovedPartOne entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderApprovedPartOne", id.toString(), this);
    }
  }

  static load(id: string): OrderApprovedPartOne | null {
    return changetype<OrderApprovedPartOne | null>(
      store.get("OrderApprovedPartOne", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get exchange(): Bytes {
    let value = this.get("exchange");
    return value!.toBytes();
  }

  set exchange(value: Bytes) {
    this.set("exchange", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get makerRelayerFee(): BigInt {
    let value = this.get("makerRelayerFee");
    return value!.toBigInt();
  }

  set makerRelayerFee(value: BigInt) {
    this.set("makerRelayerFee", Value.fromBigInt(value));
  }

  get takerRelayerFee(): BigInt {
    let value = this.get("takerRelayerFee");
    return value!.toBigInt();
  }

  set takerRelayerFee(value: BigInt) {
    this.set("takerRelayerFee", Value.fromBigInt(value));
  }

  get makerProtocolFee(): BigInt {
    let value = this.get("makerProtocolFee");
    return value!.toBigInt();
  }

  set makerProtocolFee(value: BigInt) {
    this.set("makerProtocolFee", Value.fromBigInt(value));
  }

  get takerProtocolFee(): BigInt {
    let value = this.get("takerProtocolFee");
    return value!.toBigInt();
  }

  set takerProtocolFee(value: BigInt) {
    this.set("takerProtocolFee", Value.fromBigInt(value));
  }

  get feeRecipient(): Bytes {
    let value = this.get("feeRecipient");
    return value!.toBytes();
  }

  set feeRecipient(value: Bytes) {
    this.set("feeRecipient", Value.fromBytes(value));
  }

  get feeMethod(): i32 {
    let value = this.get("feeMethod");
    return value!.toI32();
  }

  set feeMethod(value: i32) {
    this.set("feeMethod", Value.fromI32(value));
  }

  get side(): i32 {
    let value = this.get("side");
    return value!.toI32();
  }

  set side(value: i32) {
    this.set("side", Value.fromI32(value));
  }

  get saleKind(): i32 {
    let value = this.get("saleKind");
    return value!.toI32();
  }

  set saleKind(value: i32) {
    this.set("saleKind", Value.fromI32(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value!.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }
}

export class OrderApprovedPartTwo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("calldata", Value.fromBytes(Bytes.empty()));
    this.set("replacementPattern", Value.fromBytes(Bytes.empty()));
    this.set("staticTarget", Value.fromBytes(Bytes.empty()));
    this.set("staticExtradata", Value.fromBytes(Bytes.empty()));
    this.set("paymentToken", Value.fromBytes(Bytes.empty()));
    this.set("basePrice", Value.fromBigInt(BigInt.zero()));
    this.set("extra", Value.fromBigInt(BigInt.zero()));
    this.set("listingTime", Value.fromBigInt(BigInt.zero()));
    this.set("expirationTime", Value.fromBigInt(BigInt.zero()));
    this.set("salt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderApprovedPartTwo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderApprovedPartTwo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderApprovedPartTwo", id.toString(), this);
    }
  }

  static load(id: string): OrderApprovedPartTwo | null {
    return changetype<OrderApprovedPartTwo | null>(
      store.get("OrderApprovedPartTwo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get howToCall(): i32 {
    let value = this.get("howToCall");
    return value!.toI32();
  }

  set howToCall(value: i32) {
    this.set("howToCall", Value.fromI32(value));
  }

  get calldata(): Bytes {
    let value = this.get("calldata");
    return value!.toBytes();
  }

  set calldata(value: Bytes) {
    this.set("calldata", Value.fromBytes(value));
  }

  get replacementPattern(): Bytes {
    let value = this.get("replacementPattern");
    return value!.toBytes();
  }

  set replacementPattern(value: Bytes) {
    this.set("replacementPattern", Value.fromBytes(value));
  }

  get staticTarget(): Bytes {
    let value = this.get("staticTarget");
    return value!.toBytes();
  }

  set staticTarget(value: Bytes) {
    this.set("staticTarget", Value.fromBytes(value));
  }

  get staticExtradata(): Bytes {
    let value = this.get("staticExtradata");
    return value!.toBytes();
  }

  set staticExtradata(value: Bytes) {
    this.set("staticExtradata", Value.fromBytes(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    return value!.toBytes();
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get basePrice(): BigInt {
    let value = this.get("basePrice");
    return value!.toBigInt();
  }

  set basePrice(value: BigInt) {
    this.set("basePrice", Value.fromBigInt(value));
  }

  get extra(): BigInt {
    let value = this.get("extra");
    return value!.toBigInt();
  }

  set extra(value: BigInt) {
    this.set("extra", Value.fromBigInt(value));
  }

  get listingTime(): BigInt {
    let value = this.get("listingTime");
    return value!.toBigInt();
  }

  set listingTime(value: BigInt) {
    this.set("listingTime", Value.fromBigInt(value));
  }

  get expirationTime(): BigInt {
    let value = this.get("expirationTime");
    return value!.toBigInt();
  }

  set expirationTime(value: BigInt) {
    this.set("expirationTime", Value.fromBigInt(value));
  }

  get salt(): BigInt {
    let value = this.get("salt");
    return value!.toBigInt();
  }

  set salt(value: BigInt) {
    this.set("salt", Value.fromBigInt(value));
  }

  get orderbookInclusionDesired(): boolean {
    let value = this.get("orderbookInclusionDesired");
    return value!.toBoolean();
  }

  set orderbookInclusionDesired(value: boolean) {
    this.set("orderbookInclusionDesired", Value.fromBoolean(value));
  }
}

export class OrderCancelled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderCancelled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderCancelled entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderCancelled", id.toString(), this);
    }
  }

  static load(id: string): OrderCancelled | null {
    return changetype<OrderCancelled | null>(store.get("OrderCancelled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }
}

export class OrdersMatched extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("buyHash", Value.fromBytes(Bytes.empty()));
    this.set("sellHash", Value.fromBytes(Bytes.empty()));
    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("taker", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("metadata", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrdersMatched entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrdersMatched entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrdersMatched", id.toString(), this);
    }
  }

  static load(id: string): OrdersMatched | null {
    return changetype<OrdersMatched | null>(store.get("OrdersMatched", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyHash(): Bytes {
    let value = this.get("buyHash");
    return value!.toBytes();
  }

  set buyHash(value: Bytes) {
    this.set("buyHash", Value.fromBytes(value));
  }

  get sellHash(): Bytes {
    let value = this.get("sellHash");
    return value!.toBytes();
  }

  set sellHash(value: Bytes) {
    this.set("sellHash", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value!.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }
}

export class OwnershipRenounced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipRenounced entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipRenounced entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipRenounced", id.toString(), this);
    }
  }

  static load(id: string): OwnershipRenounced | null {
    return changetype<OwnershipRenounced | null>(
      store.get("OwnershipRenounced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get contentURI(): string | null {
    let value = this.get("contentURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contentURI(value: string | null) {
    if (!value) {
      this.unset("contentURI");
    } else {
      this.set("contentURI", Value.fromString(<string>value));
    }
  }

  get tokenIPFSPath(): string | null {
    let value = this.get("tokenIPFSPath");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenIPFSPath(value: string | null) {
    if (!value) {
      this.unset("tokenIPFSPath");
    } else {
      this.set("tokenIPFSPath", Value.fromString(<string>value));
    }
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get created(): Array<string> {
    let value = this.get("created");
    return value!.toStringArray();
  }

  set created(value: Array<string>) {
    this.set("created", Value.fromStringArray(value));
  }
}
